buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		springCloudVersion = 'Greenwich.M3'
	}
	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

plugins {
	// Necesario para dependencia maven
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'groovy'


group = 'com.simplify.salary'
version = '0.0.1'
sourceCompatibility = 1.8

bootJar {
	baseName = 'ms-oauth2'
	version = System.getProperty('tag', '0.0.1')
}

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/libs-milestone" }
	maven { url "https://maven.atlassian.com/3rdparty" }
}

ext {
	springCloudVersion = 'Greenwich.M3'
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-web')

	//cache
	implementation('org.springframework.boot:spring-boot-starter-data-redis')
	implementation('org.springframework.boot:spring-boot-starter-cache')
	implementation('org.springframework.data:spring-data-redis')
	
	//runtime('org.postgresql:postgresql')
	runtime('mysql:mysql-connector-java:8.0.17')

	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

	//config
	compile('org.springframework.boot:spring-boot-configuration-processor')

	//swagger
	implementation('io.springfox:springfox-swagger2:2.9.2')
	implementation('io.springfox:springfox-swagger-ui:2.9.2')

	implementation('joda-time:joda-time:2.9.4')

	compile 'net.logstash.logback:logstash-logback-encoder:4.11'

	compile 'org.webjars:bootstrap:3.3.2'

	implementation('org.springframework.cloud:spring-cloud-starter')
	implementation('org.springframework.cloud:spring-cloud-starter-config')
	implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
	implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')

	runtimeOnly 'org.projectlombok:lombok:1.16.2'
	compileOnly 'org.projectlombok:lombok:1.16.2'
	testCompileOnly 'org.projectlombok:lombok:1.16.2'
	annotationProcessor 'org.projectlombok:lombok:1.16.2'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('io.projectreactor:reactor-test')
	testImplementation('org.springframework.security:spring-security-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// START SNIPPET jacoco-configuration
jacoco {
	toolVersion = "0.8.0"
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}

test {
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

check.dependsOn jacocoTestReport

task buildDocker(type: Docker, dependsOn: build) {
	baseImage = "openjdk:8"
	maintainer = "@britez"
	dryRun = false
	tagVersion = "latest"
	tag = "${bootJar.baseName}"
	addFile {
		from bootJar
		rename { "${bootJar.baseName}.jar" }
	}
	addFile("./java-entrypoint.sh", "/java-entrypoint.sh")
	exposePort(8080)

	entryPoint([
			"/java-entrypoint.sh",
			"/${bootJar.baseName}.jar"
	])
}

bootRun {
	jvmArgs = ["-Djava.security.egd=file:/dev/./urandom", "-Dspring.profiles.active=local"]
}
